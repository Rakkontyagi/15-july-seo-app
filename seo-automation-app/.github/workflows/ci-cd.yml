name: 🚀 SEO Automation App CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 🔍 Code Quality & Security Checks
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🔍 Type check
        run: npm run type-check

      - name: 🔒 Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🔒 Dependency security check
        uses: securecodewarrior/github-action-add-sarif@v1
        if: github.event_name == 'pull_request'
        continue-on-error: true

  # 🧪 Testing Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run unit tests
        if: matrix.test-type == 'unit'
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: 🧪 Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 🧪 Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: 🧪 Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: 7

  # 🏗️ Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 📊 Analyze bundle size
        run: npm run analyze
        continue-on-error: true

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 7

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🚀 Deploy to Vercel (Staging)
        id: deploy
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 🔗 Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Staging deployment ready!\n\n📱 Preview URL: ${{ steps.deploy.outputs.url }}\n\n✅ Build completed successfully`
            })

  # 🎯 Performance Testing
  performance:
    name: 🎯 Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy-staging
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🎯 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 🎯 Web Vitals check
        run: |
          npm ci --legacy-peer-deps
          npm run test:performance
        continue-on-error: true

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://seo-automation-app.vercel.app
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🚀 Deploy to Vercel (Production)
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: ✅ Production deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: 'https://seo-automation-app.vercel.app',
              description: 'Production deployment successful',
              context: 'deployment/production'
            })

  # 📊 Post-deployment monitoring
  monitoring:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Health check
        run: |
          sleep 30 # Wait for deployment to stabilize
          curl -f https://seo-automation-app.vercel.app/api/health || exit 1

      - name: 📊 Synthetic monitoring
        run: |
          npm ci --legacy-peer-deps
          npm run test:synthetic
        continue-on-error: true

  # 🔄 Rollback (Manual)
  rollback:
    name: 🔄 Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production, monitoring]
    environment:
      name: production-rollback
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔄 Rollback deployment
        run: |
          # Get previous deployment
          PREV_DEPLOYMENT=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "READY" | sed -n '2p' | awk '{print $2}')
          vercel alias $PREV_DEPLOYMENT seo-automation-app.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 📢 Rollback notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Rollback Executed',
              body: `Production deployment failed and has been rolled back.\n\nCommit: ${context.sha}\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}`,
              labels: ['urgent', 'deployment', 'rollback']
            })