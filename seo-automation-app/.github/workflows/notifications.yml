name: Deployment Notifications

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      notification_type:
        required: true
        type: string
      status:
        required: false
        type: string
        default: 'success'
      duration:
        required: false
        type: string
        default: '0'
      deployment_url:
        required: false
        type: string
      error_message:
        required: false
        type: string
      health_check_passed:
        required: false
        type: boolean
        default: true
      additional_info:
        required: false
        type: string
        default: '{}'

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    name: Send Deployment Notifications
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Parse additional info
        id: parse-info
        run: |
          echo "Parsing additional info..."
          echo "${{ inputs.additional_info }}" > additional_info.json
          
          # Extract values from additional info
          branch=$(echo '${{ inputs.additional_info }}' | jq -r '.branch // "unknown"')
          commit=$(echo '${{ inputs.additional_info }}' | jq -r '.commit // "unknown"')
          user=$(echo '${{ inputs.additional_info }}' | jq -r '.user // "unknown"')
          failed_stage=$(echo '${{ inputs.additional_info }}' | jq -r '.failed_stage // "unknown"')
          
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "commit=$commit" >> $GITHUB_OUTPUT
          echo "user=$user" >> $GITHUB_OUTPUT
          echo "failed_stage=$failed_stage" >> $GITHUB_OUTPUT

      - name: Send deployment start notification
        if: inputs.notification_type == 'deployment-start'
        run: |
          node scripts/deployment-notifications.js \
            --env=${{ inputs.environment }} \
            --action=deployment-start \
            --branch=${{ steps.parse-info.outputs.branch }} \
            --commit=${{ steps.parse-info.outputs.commit }} \
            --user=${{ steps.parse-info.outputs.user }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Send deployment success notification
        if: inputs.notification_type == 'deployment-success'
        run: |
          node scripts/deployment-notifications.js \
            --env=${{ inputs.environment }} \
            --action=deployment-success \
            --duration=${{ inputs.duration }} \
            --url=${{ inputs.deployment_url }} \
            ${{ inputs.health_check_passed && '--health-check-passed' || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Send deployment failure notification
        if: inputs.notification_type == 'deployment-failure'
        run: |
          node scripts/deployment-notifications.js \
            --env=${{ inputs.environment }} \
            --action=deployment-failure \
            --duration=${{ inputs.duration }} \
            --error="${{ inputs.error_message }}" \
            --failed-stage=${{ steps.parse-info.outputs.failed_stage }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Send rollback notification
        if: inputs.notification_type == 'rollback-start' || inputs.notification_type == 'rollback-complete'
        run: |
          # This would be implemented with specific rollback notification logic
          echo "Rollback notification would be sent here"
          # node scripts/deployment-notifications.js --env=${{ inputs.environment }} --action=${{ inputs.notification_type }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Send health check failure notification
        if: inputs.notification_type == 'health-check-failure'
        run: |
          # This would be implemented with specific health check notification logic
          echo "Health check failure notification would be sent here"
          # node scripts/deployment-notifications.js --env=${{ inputs.environment }} --action=health-check-failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Create notification summary
        run: |
          echo "## Notification Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.notification_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ inputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${{ inputs.duration }}ms" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ inputs.deployment_url }}" ]]; then
            echo "- **Deployment URL**: ${{ inputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ inputs.error_message }}" ]]; then
            echo "- **Error**: ${{ inputs.error_message }}" >> $GITHUB_STEP_SUMMARY
          fi

  test-notifications:
    runs-on: ubuntu-latest
    name: Test Notification Channels
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_notifications == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test all notification channels
        run: |
          echo "Testing notification channels..."
          
          # Test staging notifications
          node scripts/deployment-notifications.js --env=staging --action=test
          
          # Test production notifications
          node scripts/deployment-notifications.js --env=production --action=test
          
          echo "✅ Notification tests completed"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}

      - name: Validate notification configuration
        run: |
          echo "Validating notification configuration..."
          
          # Check if required secrets are configured
          if [[ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]]; then
            echo "⚠️  Warning: SLACK_WEBHOOK_URL not configured"
          else
            echo "✅ Slack webhook configured"
          fi
          
          if [[ -z "${{ secrets.TEAMS_WEBHOOK_URL }}" ]]; then
            echo "⚠️  Warning: TEAMS_WEBHOOK_URL not configured"
          else
            echo "✅ Teams webhook configured"
          fi
          
          if [[ -z "${{ secrets.PAGERDUTY_INTEGRATION_KEY }}" ]]; then
            echo "⚠️  Warning: PAGERDUTY_INTEGRATION_KEY not configured"
          else
            echo "✅ PagerDuty integration configured"
          fi

  notification-metrics:
    runs-on: ubuntu-latest
    name: Collect Notification Metrics
    if: always()
    steps:
      - name: Collect notification metrics
        run: |
          echo "Collecting notification metrics..."
          
          # In a real implementation, this would collect metrics about:
          # - Notification success/failure rates
          # - Response times
          # - Channel availability
          # - Alert volume
          
          echo "## Notification Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Notification Type**: ${{ inputs.notification_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.send-notifications.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Log metrics to a file that could be processed by monitoring systems
          cat > notification-metrics.json << EOF
          {
            "timestamp": "$(date -u -Iseconds)",
            "environment": "${{ inputs.environment }}",
            "notification_type": "${{ inputs.notification_type }}",
            "status": "${{ needs.send-notifications.result }}",
            "duration": "${{ inputs.duration }}",
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF
          
          echo "Metrics collected and logged"

      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: notification-metrics-${{ github.run_id }}
          path: notification-metrics.json
          retention-days: 7