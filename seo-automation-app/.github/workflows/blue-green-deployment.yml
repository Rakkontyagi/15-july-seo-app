name: Blue-Green Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      enable_traffic_split:
        description: 'Enable gradual traffic splitting'
        required: false
        default: true
        type: boolean
      traffic_split_percent:
        description: 'Traffic split percentage (1-100)'
        required: false
        default: '50'
        type: string
      monitoring_duration:
        description: 'Monitoring duration in minutes'
        required: false
        default: '5'
        type: string
  
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      enable_traffic_split:
        required: false
        type: boolean
        default: true
      traffic_split_percent:
        required: false
        type: string
        default: '50'
      monitoring_duration:
        required: false
        type: string
        default: '5'

env:
  NODE_VERSION: '18'

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    name: Prepare Blue-Green Deployment
    outputs:
      current_environment: ${{ steps.detect-env.outputs.current_environment }}
      target_environment: ${{ steps.detect-env.outputs.target_environment }}
      deployment_config: ${{ steps.config.outputs.deployment_config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Detect current environment
        id: detect-env
        run: |
          echo "Detecting current environment..."
          
          # Use the blue-green deployment script to detect current environment
          current_env=$(node scripts/blue-green-deployment.js --env=${{ inputs.environment }} --action=status | jq -r '.currentEnvironment')
          target_env=$([ "$current_env" = "blue" ] && echo "green" || echo "blue")
          
          echo "current_environment=$current_env" >> $GITHUB_OUTPUT
          echo "target_environment=$target_env" >> $GITHUB_OUTPUT
          
          echo "Current environment: $current_env"
          echo "Target environment: $target_env"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Prepare deployment configuration
        id: config
        run: |
          echo "Preparing deployment configuration..."
          
          config=$(cat << EOF
          {
            "environment": "${{ inputs.environment }}",
            "current_environment": "${{ steps.detect-env.outputs.current_environment }}",
            "target_environment": "${{ steps.detect-env.outputs.target_environment }}",
            "enable_traffic_split": ${{ inputs.enable_traffic_split }},
            "traffic_split_percent": ${{ inputs.traffic_split_percent }},
            "monitoring_duration": ${{ inputs.monitoring_duration }}
          }
          EOF
          )
          
          echo "deployment_config=$config" >> $GITHUB_OUTPUT
          
          echo "Deployment configuration:"
          echo "$config" | jq '.'

  quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks
    needs: prepare-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm test

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  deploy-to-target:
    runs-on: ubuntu-latest
    name: Deploy to Target Environment
    needs: [prepare-deployment, quality-checks]
    environment: ${{ inputs.environment }}
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      target_environment: ${{ needs.prepare-deployment.outputs.target_environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create deployment backup
        run: npm run deployment:backup
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Run database migrations
        run: npm run db:migrate:prod --zero-downtime
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Deploy to target environment
        id: deploy
        run: |
          echo "Deploying to ${{ needs.prepare-deployment.outputs.target_environment }} environment..."
          
          # Deploy using blue-green deployment script
          deployment_url=$(node scripts/blue-green-deployment.js --env=${{ inputs.environment }} --action=deploy | grep -o 'https://[^[:space:]]*' | head -1)
          
          if [[ -z "$deployment_url" ]]; then
            echo "❌ Failed to extract deployment URL"
            exit 1
          fi
          
          echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
          echo "✅ Deployed to: $deployment_url"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

  validate-deployment:
    runs-on: ubuntu-latest
    name: Validate Target Environment
    needs: deploy-to-target
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Run health checks
        run: |
          echo "Running health checks on target environment..."
          node scripts/health-check.js ${{ needs.deploy-to-target.outputs.deployment_url }} ${{ inputs.environment }} --advanced
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on target environment..."
          npm run test:smoke
        env:
          SMOKE_TEST_BASE_URL: ${{ needs.deploy-to-target.outputs.deployment_url }}

  traffic-split:
    runs-on: ubuntu-latest
    name: Gradual Traffic Split
    needs: [prepare-deployment, deploy-to-target, validate-deployment]
    if: inputs.enable_traffic_split == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start traffic split
        run: |
          echo "Starting traffic split: ${{ inputs.traffic_split_percent }}% to new environment"
          
          # Create canary alias for gradual rollout
          vercel alias ${{ needs.deploy-to-target.outputs.deployment_url }} canary-${{ inputs.environment }}.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
          
          echo "✅ Traffic split initiated"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Monitor traffic split
        run: |
          echo "Monitoring traffic split for ${{ inputs.monitoring_duration }} minutes..."
          
          monitoring_duration_seconds=$((${{ inputs.monitoring_duration }} * 60))
          end_time=$(($(date +%s) + monitoring_duration_seconds))
          
          while [ $(date +%s) -lt $end_time ]; do
            echo "Checking metrics..."
            
            # Run health checks on both environments
            node scripts/health-check.js ${{ needs.deploy-to-target.outputs.deployment_url }} ${{ inputs.environment }}
            
            if [ $? -ne 0 ]; then
              echo "❌ Health check failed during traffic split"
              exit 1
            fi
            
            echo "✅ Health check passed, continuing monitoring..."
            sleep 30
          done
          
          echo "✅ Traffic split monitoring completed successfully"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

  switch-traffic:
    runs-on: ubuntu-latest
    name: Switch Production Traffic
    needs: [prepare-deployment, deploy-to-target, validate-deployment]
    if: always() && needs.validate-deployment.result == 'success'
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Switch production traffic
        run: |
          echo "Switching production traffic to ${{ needs.deploy-to-target.outputs.target_environment }} environment..."
          
          # Get production URL based on environment
          if [ "${{ inputs.environment }}" = "production" ]; then
            prod_url="https://seo-automation-app.vercel.app"
          else
            prod_url="https://seo-automation-app-staging.vercel.app"
          fi
          
          # Switch traffic
          vercel alias ${{ needs.deploy-to-target.outputs.deployment_url }} "$prod_url" --token=${{ secrets.VERCEL_TOKEN }}
          
          echo "✅ Traffic switched to new environment"
          echo "Production URL: $prod_url"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Wait for DNS propagation
        run: |
          echo "Waiting for DNS propagation..."
          sleep 30

      - name: Verify traffic switch
        run: |
          echo "Verifying traffic switch..."
          
          # Get production URL
          if [ "${{ inputs.environment }}" = "production" ]; then
            prod_url="https://seo-automation-app.vercel.app"
          else
            prod_url="https://seo-automation-app-staging.vercel.app"
          fi
          
          # Run health checks on production URL
          node scripts/health-check.js "$prod_url" ${{ inputs.environment }} --advanced
          
          if [ $? -eq 0 ]; then
            echo "✅ Traffic switch verification successful"
          else
            echo "❌ Traffic switch verification failed"
            exit 1
          fi
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

  cleanup-old-environment:
    runs-on: ubuntu-latest
    name: Cleanup Old Environment
    needs: [prepare-deployment, switch-traffic]
    if: always() && needs.switch-traffic.result == 'success'
    steps:
      - name: Cleanup old environment
        run: |
          echo "Cleaning up old environment..."
          
          # Wait before cleanup to ensure stability
          sleep 60
          
          # Remove old environment aliases
          current_env="${{ needs.prepare-deployment.outputs.current_environment }}"
          
          if [ "${{ inputs.environment }}" = "production" ]; then
            old_alias="$current_env-seo-automation-app.vercel.app"
          else
            old_alias="$current_env-seo-automation-app-staging.vercel.app"
          fi
          
          # Remove old alias (if exists)
          vercel alias rm "$old_alias" --token=${{ secrets.VERCEL_TOKEN }} || true
          
          echo "✅ Old environment cleanup completed"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  post-deployment:
    runs-on: ubuntu-latest
    name: Post-Deployment Tasks
    needs: [prepare-deployment, switch-traffic, cleanup-old-environment]
    if: always() && needs.switch-traffic.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          
          node scripts/blue-green-deployment.js --env=${{ inputs.environment }} --action=report > deployment-report.json
          
          echo "## Blue-Green Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: Blue-Green" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed Environment**: ${{ needs.prepare-deployment.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Traffic Split**: ${{ inputs.enable_traffic_split }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: blue-green-deployment-report-${{ inputs.environment }}
          path: deployment-report.json
          retention-days: 30

      - name: Send success notification
        uses: ./.github/workflows/notifications.yml
        with:
          environment: ${{ inputs.environment }}
          notification_type: 'deployment-success'
          status: 'success'
          deployment_url: ${{ needs.deploy-to-target.outputs.deployment_url }}
          health_check_passed: true
          additional_info: '{"strategy":"blue-green","deployed_environment":"${{ needs.prepare-deployment.outputs.target_environment }}","traffic_split":"${{ inputs.enable_traffic_split }}"}'

  rollback-on-failure:
    runs-on: ubuntu-latest
    name: Rollback on Failure
    needs: [prepare-deployment, deploy-to-target, validate-deployment, switch-traffic]
    if: failure() && needs.deploy-to-target.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Execute rollback
        run: |
          echo "❌ Deployment failed, executing rollback..."
          
          # Use rollback script to revert to previous environment
          node scripts/deployment-rollback.js --env=${{ inputs.environment }} --type=application
          
          echo "✅ Rollback completed"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Send rollback notification
        uses: ./.github/workflows/notifications.yml
        with:
          environment: ${{ inputs.environment }}
          notification_type: 'rollback-complete'
          status: 'success'
          additional_info: '{"reason":"blue-green-deployment-failure","strategy":"automatic"}'