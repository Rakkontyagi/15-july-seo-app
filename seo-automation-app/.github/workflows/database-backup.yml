name: ðŸ’¾ Database Backup & Maintenance

on:
  schedule:
    - cron: '0 3 * * *' # Daily at 3 AM
    - cron: '0 1 * * 0' # Weekly full backup on Sunday at 1 AM
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup'
        required: true
        default: 'incremental'
        type: choice
        options:
        - incremental
        - full

jobs:
  # ðŸ’¾ Database Backup
  database-backup:
    name: ðŸ’¾ Database Backup
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: ðŸ“¦ Checkout code
        uses: actions/checkout@v4

      - name: ðŸ“¦ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: ðŸ“¦ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: ðŸ’¾ Run database backup
        run: |
          node scripts/database-backup.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          BACKUP_TYPE: ${{ github.event.inputs.backup_type || 'incremental' }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}

      - name: âœ… Backup verification
        run: |
          node scripts/verify-backup.js
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}

  # ðŸ§¹ Database Maintenance
  database-maintenance:
    name: ðŸ§¹ Database Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: database-backup
    if: github.event.schedule == '0 1 * * 0' # Weekly only
    
    steps:
      - name: ðŸ“¦ Checkout code
        uses: actions/checkout@v4

      - name: ðŸ“¦ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: ðŸ“¦ Install dependencies
        run: npm ci --legacy-peer-deps

      - name: ðŸ§¹ Run maintenance tasks
        run: |
          node scripts/database-maintenance.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: ðŸ“Š Generate maintenance report
        run: |
          node scripts/maintenance-report.js
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # ðŸš¨ Backup Status Notification
  backup-notification:
    name: ðŸš¨ Backup Status Notification
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [database-backup, database-maintenance]
    if: always()
    
    steps:
      - name: ðŸ“§ Send success notification
        if: needs.database-backup.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const backupType = '${{ github.event.inputs.backup_type || "scheduled" }}';
            const message = `âœ… Database backup completed successfully!\n\nType: ${backupType}\nTime: ${new Date().toISOString()}`;
            
            // You can integrate with Slack, email, or other notification services here
            console.log(message);

      - name: ðŸš¨ Send failure notification
        if: needs.database-backup.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Database Backup Failed',
              body: `Database backup failed at ${new Date().toISOString()}\n\nPlease investigate immediately and ensure data integrity.`,
              labels: ['urgent', 'database', 'backup']
            })