name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quality Assurance Job
  quality-check:
    runs-on: ubuntu-latest
    name: Quality Assurance
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate

      - name: Run unit tests
        run: npm test -- --coverage --passWithNoTests

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  # Build Job
  build:
    runs-on: ubuntu-latest
    needs: quality-check
    name: Build Application
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  # Integration Tests Job
  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    name: Integration Tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: seo_automation_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/seo_automation_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/seo_automation_test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY_TEST }}

  # E2E Tests Job
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    name: E2E Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    name: Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Database Migration Check
  database-migration-check:
    runs-on: ubuntu-latest
    needs: quality-check
    name: Database Migration Check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check migration scripts
        run: npm run db:check-migrations
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, integration-tests, e2e-tests, security-scan, database-migration-check]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment:
      name: staging
      url: ${{ steps.vercel-deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Record deployment start time
        run: echo "DEPLOYMENT_START_TIME=$(date +%s%3N)" >> $GITHUB_ENV

      - name: Run database migrations (Staging)
        run: npm run db:migrate:staging
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_STAGING }}

      - name: Deploy to Vercel (Staging)
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env ENVIRONMENT=staging'
          working-directory: ./

      - name: Health check (Staging)
        id: health-check
        run: |
          sleep 30
          if curl -f "${{ steps.vercel-deploy.outputs.preview-url }}/api/health"; then
            echo "health_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "health_check_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Calculate deployment duration
        run: |
          END_TIME=$(date +%s%3N)
          DURATION=$((END_TIME - DEPLOYMENT_START_TIME))
          echo "DEPLOYMENT_DURATION=$DURATION" >> $GITHUB_ENV

      - name: Notify staging deployment success
        if: success()
        uses: ./.github/workflows/notifications.yml
        with:
          environment: 'staging'
          notification_type: 'deployment-success'
          status: 'success'
          duration: ${{ env.DEPLOYMENT_DURATION }}
          deployment_url: ${{ steps.vercel-deploy.outputs.preview-url }}
          health_check_passed: ${{ steps.health-check.outputs.health_check_passed == 'true' }}
          additional_info: '{"branch":"${{ github.ref_name }}","commit":"${{ github.sha }}","user":"${{ github.actor }}"}'

      - name: Notify staging deployment failure
        if: failure()
        uses: ./.github/workflows/notifications.yml
        with:
          environment: 'staging'
          notification_type: 'deployment-failure'
          status: 'failure'
          duration: ${{ env.DEPLOYMENT_DURATION }}
          error_message: 'Staging deployment failed'
          additional_info: '{"branch":"${{ github.ref_name }}","commit":"${{ github.sha }}","user":"${{ github.actor }}","failed_stage":"${{ job.status }}"}'

  # Performance Testing Job
  performance-testing:
    runs-on: ubuntu-latest
    needs: deploy-staging
    name: Performance Testing
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Wait for staging deployment to be ready
        run: |
          echo "Waiting for staging deployment to stabilize..."
          sleep 60

      - name: Run baseline performance tests
        run: npm run performance:baseline
        env:
          BASE_URL: ${{ needs.deploy-staging.outputs.preview-url || 'https://seo-automation-app-staging.vercel.app' }}
        continue-on-error: true

      - name: Run load performance tests
        run: npm run performance:load
        env:
          BASE_URL: ${{ needs.deploy-staging.outputs.preview-url || 'https://seo-automation-app-staging.vercel.app' }}
        continue-on-error: true

      - name: Run stress performance tests
        run: npm run performance:stress
        env:
          BASE_URL: ${{ needs.deploy-staging.outputs.preview-url || 'https://seo-automation-app-staging.vercel.app' }}
        continue-on-error: true

      - name: Generate performance report
        run: |
          echo "# Performance Test Results" > performance-summary.md
          echo "## Test Environment: Staging" >> performance-summary.md
          echo "## Test Date: $(date)" >> performance-summary.md
          echo "" >> performance-summary.md
          
          if [ -d "performance-reports" ]; then
            echo "## Test Results" >> performance-summary.md
            for report in performance-reports/*-summary.json; do
              if [ -f "$report" ]; then
                echo "### $(basename $report .json)" >> performance-summary.md
                echo '```json' >> performance-summary.md
                cat "$report" >> performance-summary.md
                echo '```' >> performance-summary.md
                echo "" >> performance-summary.md
              fi
            done
          fi

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-reports/
            performance-summary.md
          retention-days: 30

      - name: Check performance thresholds
        id: performance-check
        run: |
          if [ -f "performance-reports/performance-suite-staging-*.json" ]; then
            # Extract the latest suite result
            LATEST_REPORT=$(ls -t performance-reports/performance-suite-staging-*.json | head -n1)
            
            # Use Node.js to parse JSON and check thresholds
            node -e "
              const fs = require('fs');
              const report = JSON.parse(fs.readFileSync('$LATEST_REPORT', 'utf8'));
              
              console.log('Performance Test Summary:');
              console.log('Total Tests:', report.summary.total);
              console.log('Passed:', report.summary.passed);
              console.log('Failed:', report.summary.failed);
              console.log('Average Score:', report.summary.averageScore.toFixed(1));
              
              // Check if performance meets minimum requirements
              const minimumScore = 75;
              const maximumFailures = 1;
              
              if (report.summary.averageScore >= minimumScore && report.summary.failed <= maximumFailures) {
                console.log('✅ Performance tests passed requirements');
                process.exit(0);
              } else {
                console.log('❌ Performance tests failed requirements');
                console.log('Required: Average score >= 75, Failed tests <= 1');
                process.exit(1);
              }
            "
          else
            echo "No performance suite results found, considering as passed"
          fi

      - name: Notify performance test results
        if: always()
        uses: ./.github/workflows/notifications.yml
        with:
          environment: 'staging'
          notification_type: 'performance-test-complete'
          status: ${{ steps.performance-check.outcome }}
          additional_info: '{"branch":"${{ github.ref_name }}","commit":"${{ github.sha }}","test_type":"performance"}'

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, integration-tests, e2e-tests, security-scan, database-migration-check, performance-testing]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://seo-automation-app.vercel.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Record deployment start time
        run: echo "DEPLOYMENT_START_TIME=$(date +%s%3N)" >> $GITHUB_ENV

      - name: Notify production deployment start
        uses: ./.github/workflows/notifications.yml
        with:
          environment: 'production'
          notification_type: 'deployment-start'
          additional_info: '{"branch":"${{ github.ref_name }}","commit":"${{ github.sha }}","user":"${{ github.actor }}"}'

      - name: Create deployment backup
        run: npm run deployment:backup
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Run database migrations (Production)
        run: npm run db:migrate:prod
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Deploy to Vercel (Production)
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Health check (Production)
        id: health-check
        run: |
          sleep 30
          if curl -f "https://seo-automation-app.vercel.app/api/health"; then
            echo "health_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "health_check_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Smoke tests (Production)
        run: npm run test:smoke
        env:
          SMOKE_TEST_BASE_URL: https://seo-automation-app.vercel.app

      - name: Calculate deployment duration
        run: |
          END_TIME=$(date +%s%3N)
          DURATION=$((END_TIME - DEPLOYMENT_START_TIME))
          echo "DEPLOYMENT_DURATION=$DURATION" >> $GITHUB_ENV

      - name: Notify production deployment success
        if: success()
        uses: ./.github/workflows/notifications.yml
        with:
          environment: 'production'
          notification_type: 'deployment-success'
          status: 'success'
          duration: ${{ env.DEPLOYMENT_DURATION }}
          deployment_url: 'https://seo-automation-app.vercel.app'
          health_check_passed: ${{ steps.health-check.outputs.health_check_passed == 'true' }}
          additional_info: '{"branch":"${{ github.ref_name }}","commit":"${{ github.sha }}","user":"${{ github.actor }}"}'

      - name: Notify production deployment failure
        if: failure()
        uses: ./.github/workflows/notifications.yml
        with:
          environment: 'production'
          notification_type: 'deployment-failure'
          status: 'failure'
          duration: ${{ env.DEPLOYMENT_DURATION }}
          error_message: 'Production deployment failed'
          additional_info: '{"branch":"${{ github.ref_name }}","commit":"${{ github.sha }}","user":"${{ github.actor }}","failed_stage":"${{ job.status }}"}'

  # Rollback Job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    name: Rollback Deployment
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Execute rollback
        run: npm run deployment:rollback
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Rollback completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}