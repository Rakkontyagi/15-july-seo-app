name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback_type:
        description: 'Type of rollback to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - application
          - database
      target_backup:
        description: 'Specific backup timestamp (optional)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  validate-rollback:
    runs-on: ubuntu-latest
    name: Validate Rollback Request
    outputs:
      should_proceed: ${{ steps.validation.outputs.should_proceed }}
      validation_message: ${{ steps.validation.outputs.message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate rollback request
        id: validation
        run: |
          echo "Validating rollback request..."
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Rollback Type: ${{ github.event.inputs.rollback_type }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          
          # Check if environment is valid
          if [[ "${{ github.event.inputs.environment }}" != "staging" && "${{ github.event.inputs.environment }}" != "production" ]]; then
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "message=Invalid environment specified" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if reason is provided
          if [[ -z "${{ github.event.inputs.reason }}" ]]; then
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "message=Rollback reason is required" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "should_proceed=true" >> $GITHUB_OUTPUT
          echo "message=Validation passed" >> $GITHUB_OUTPUT

      - name: Check available backups
        run: |
          node scripts/deployment-rollback.js --env=${{ github.event.inputs.environment }} --list
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  notify-rollback-start:
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.should_proceed == 'true'
    name: Notify Rollback Start
    steps:
      - name: Notify team of rollback start
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 EMERGENCY ROLLBACK INITIATED",
              "attachments": [
                {
                  "color": "warning",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ github.event.inputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Type",
                      "value": "${{ github.event.inputs.rollback_type }}",
                      "short": true
                    },
                    {
                      "title": "Reason",
                      "value": "${{ github.event.inputs.reason }}",
                      "short": false
                    },
                    {
                      "title": "Initiated By",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  execute-rollback:
    runs-on: ubuntu-latest
    needs: [validate-rollback, notify-rollback-start]
    if: needs.validate-rollback.outputs.should_proceed == 'true'
    name: Execute Rollback
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Execute rollback
        id: rollback
        run: |
          echo "Starting rollback process..."
          
          ROLLBACK_CMD="node scripts/deployment-rollback.js --env=${{ github.event.inputs.environment }} --type=${{ github.event.inputs.rollback_type }}"
          
          if [[ -n "${{ github.event.inputs.target_backup }}" ]]; then
            ROLLBACK_CMD="$ROLLBACK_CMD --backup=${{ github.event.inputs.target_backup }}"
          fi
          
          echo "Executing: $ROLLBACK_CMD"
          
          if $ROLLBACK_CMD; then
            echo "rollback_status=success" >> $GITHUB_OUTPUT
            echo "✅ Rollback completed successfully"
          else
            echo "rollback_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Rollback failed"
            exit 1
          fi
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify rollback
        if: steps.rollback.outputs.rollback_status == 'success'
        run: |
          echo "Verifying rollback..."
          
          # Wait for services to stabilize
          sleep 30
          
          # Run health checks
          node scripts/health-check.js --env=${{ github.event.inputs.environment }} --advanced
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Create rollback report
        if: always()
        run: |
          echo "Creating rollback report..."
          
          cat > rollback-report.md << EOF
          # Rollback Report
          
          ## Details
          - **Environment**: ${{ github.event.inputs.environment }}
          - **Type**: ${{ github.event.inputs.rollback_type }}
          - **Status**: ${{ steps.rollback.outputs.rollback_status }}
          - **Initiated By**: ${{ github.actor }}
          - **Timestamp**: $(date -u)
          - **Reason**: ${{ github.event.inputs.reason }}
          
          ## Workflow
          - **Run ID**: ${{ github.run_id }}
          - **Workflow URL**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ## Next Steps
          - [ ] Verify application functionality
          - [ ] Monitor error rates and performance
          - [ ] Investigate root cause of issue
          - [ ] Plan remediation strategy
          EOF
          
          echo "Rollback report created"

      - name: Upload rollback report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rollback-report-${{ github.event.inputs.environment }}
          path: rollback-report.md
          retention-days: 30

  notify-rollback-completion:
    runs-on: ubuntu-latest
    needs: execute-rollback
    if: always()
    name: Notify Rollback Completion
    steps:
      - name: Notify team of rollback completion
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ needs.execute-rollback.result == 'success' && '✅ ROLLBACK COMPLETED' || '❌ ROLLBACK FAILED' }}",
              "attachments": [
                {
                  "color": "${{ needs.execute-rollback.result == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "${{ github.event.inputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "Type",
                      "value": "${{ github.event.inputs.rollback_type }}",
                      "short": true
                    },
                    {
                      "title": "Status",
                      "value": "${{ needs.execute-rollback.result }}",
                      "short": true
                    },
                    {
                      "title": "Duration",
                      "value": "${{ needs.execute-rollback.result == 'success' && '~2-5 minutes' || 'N/A' }}",
                      "short": true
                    },
                    {
                      "title": "Reason",
                      "value": "${{ github.event.inputs.reason }}",
                      "short": false
                    },
                    {
                      "title": "Next Steps",
                      "value": "${{ needs.execute-rollback.result == 'success' && 'Monitor system stability and investigate root cause' || 'Investigate rollback failure and consider manual intervention' }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-rollback-monitoring:
    runs-on: ubuntu-latest
    needs: execute-rollback
    if: needs.execute-rollback.result == 'success'
    name: Post-Rollback Monitoring
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Monitor system stability
        run: |
          echo "Starting post-rollback monitoring..."
          
          # Monitor for 5 minutes
          for i in {1..10}; do
            echo "Health check $i/10..."
            
            if node scripts/health-check.js --env=${{ github.event.inputs.environment }}; then
              echo "✅ Health check $i passed"
            else
              echo "❌ Health check $i failed"
              exit 1
            fi
            
            sleep 30
          done
          
          echo "✅ Post-rollback monitoring completed successfully"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      - name: Update incident status
        if: always()
        run: |
          echo "Updating incident status..."
          
          # In a real implementation, this would update incident management system
          echo "Incident status updated: System rolled back and monitoring"

  create-postmortem-issue:
    runs-on: ubuntu-latest
    needs: execute-rollback
    if: needs.execute-rollback.result == 'success'
    name: Create Postmortem Issue
    steps:
      - name: Create postmortem issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔍 Postmortem: Emergency Rollback - ${{ github.event.inputs.environment }}`;
            const body = `
            # Postmortem: Emergency Rollback
            
            ## Incident Summary
            - **Environment**: ${{ github.event.inputs.environment }}
            - **Rollback Type**: ${{ github.event.inputs.rollback_type }}
            - **Initiated By**: ${{ github.actor }}
            - **Timestamp**: ${new Date().toISOString()}
            - **Reason**: ${{ github.event.inputs.reason }}
            
            ## Timeline
            - **Rollback Initiated**: ${new Date().toISOString()}
            - **Rollback Completed**: TBD
            - **System Stable**: TBD
            
            ## Tasks
            - [ ] Investigate root cause of the issue
            - [ ] Document lessons learned
            - [ ] Implement preventive measures
            - [ ] Update monitoring and alerting
            - [ ] Review deployment process
            - [ ] Update rollback procedures if needed
            
            ## Links
            - [Rollback Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Rollback Report](Link to artifact)
            
            ## Action Items
            - [ ] Complete root cause analysis
            - [ ] Update documentation
            - [ ] Implement fixes
            - [ ] Test rollback procedure
            
            /label bug, incident, postmortem
            /assign @${{ github.actor }}
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'incident', 'postmortem']
            });